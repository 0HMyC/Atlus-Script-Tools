using System.IO;
using System.Diagnostics;
using System;
using System.Collections.Generic;

using AtlusScriptLib.Common;
using AtlusScriptLib.Disassemblers;
using AtlusScriptLib;

namespace AtlusScriptCompiler
{
    class Program
    {
        public const string OPTION_IDENTIFIER_INPUT         = "input";
        public const string OPTION_IDENTIFIER_OUTPUT        = "output";
        public const string OPTION_IDENTIFIER_DISASSEMBLE   = "disassemble";

        static void DisplayArguments()
        {
            Console.WriteLine("\n## AtlusScriptCompiler arguments ##\n");
            Console.WriteLine("-input <path to file>        Specify input file.");
            Console.WriteLine("[-output <path to file>]     Specify output file. If not specified, the input path will be used as a base for a new file name.");
            Console.WriteLine("[-disassemble]               Disassemble a FlowScript binary. Requires the input to be a FlowScript binary.");
            Console.ReadKey();
        }

        static void Main(string[] args)
        {

            // Set up command line parser so we can iterate over the options later
            var commandLineParser = new CommandLineParser(args);
            commandLineParser.RegisterOption(new CommandLineOption(OPTION_IDENTIFIER_INPUT, 1, CommandLineOptionNecessity.Required));
            commandLineParser.RegisterOption(new CommandLineOption(OPTION_IDENTIFIER_OUTPUT, 1, CommandLineOptionNecessity.Optional));
            commandLineParser.RegisterOption(new CommandLineOption(OPTION_IDENTIFIER_DISASSEMBLE, 0, CommandLineOptionNecessity.Optional));

            // Get the options from the parser
            Dictionary<string, CommandLineOption> options;

            try
            {
                options = commandLineParser.Parse();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Invalid arguments specified. {ex.Message}");
                DisplayArguments();
                return;
            }

            // set up options
            string inputPath = options[OPTION_IDENTIFIER_INPUT].Arguments[0];

            string outputPath = Path.ChangeExtension(inputPath, "flwasm");
            if (options.ContainsKey(OPTION_IDENTIFIER_OUTPUT))
                outputPath = options[OPTION_IDENTIFIER_OUTPUT].Arguments[0];

            // set up trace
            Trace.Listeners.Add(new ConsoleTraceListener());

            // decide action
            if (options.ContainsKey(OPTION_IDENTIFIER_DISASSEMBLE))
            {
                var disassembler = new FlowScriptBinaryDisassembler(outputPath)
                {
                    HeaderString = "This file was generated by AtlusScriptCompiler"
                };

                var script = FlowScriptBinary.FromFile(inputPath);
                disassembler.Disassemble(script);
            }
        }
    }
}
