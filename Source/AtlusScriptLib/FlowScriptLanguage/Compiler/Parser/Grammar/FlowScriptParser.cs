//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\users\smart\documents\visual studio 2017\Projects\AtlusScriptToolchain\Source\AtlusScriptLib\FlowScriptLanguage\Compiler\Parser\Grammar\FlowScript.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AtlusScriptLib.FlowScriptLanguage.Compiler.Parser.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class FlowScriptParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, Function=26, Global=27, If=28, Else=29, For=30, While=31, Break=32, 
		Continue=33, Return=34, Goto=35, TypeIdentifier=36, BoolLiteral=37, IntLiteral=38, 
		FloatLiteral=39, StringLiteral=40, Identifier=41, Whitespace=42, Newline=43, 
		BlockComment=44, LineComment=45;
	public const int
		RULE_compilationUnit = 0, RULE_importStatement = 1, RULE_compoundStatement = 2, 
		RULE_statement = 3, RULE_declarationStatement = 4, RULE_functionDeclarationStatement = 5, 
		RULE_procedureDeclarationStatement = 6, RULE_variableDeclarationStatement = 7, 
		RULE_labelDeclarationStatement = 8, RULE_parameterList = 9, RULE_parameter = 10, 
		RULE_expressionList = 11, RULE_expression = 12, RULE_primary = 13, RULE_constant = 14, 
		RULE_ifStatement = 15, RULE_forStatement = 16, RULE_whileStatement = 17, 
		RULE_breakStatement = 18, RULE_continueStatement = 19, RULE_returnStatement = 20, 
		RULE_gotoStatement = 21;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importStatement", "compoundStatement", "statement", 
		"declarationStatement", "functionDeclarationStatement", "procedureDeclarationStatement", 
		"variableDeclarationStatement", "labelDeclarationStatement", "parameterList", 
		"parameter", "expressionList", "expression", "primary", "constant", "ifStatement", 
		"forStatement", "whileStatement", "breakStatement", "continueStatement", 
		"returnStatement", "gotoStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "';'", "'{'", "'}'", "'('", "')'", "'='", "':'", "','", 
		"'--'", "'++'", "'~'", "'!'", "'-'", "'*'", "'/'", "'+'", "'<'", "'>'", 
		"'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'function'", "'global'", 
		"'if'", "'else'", "'for'", "'while'", "'break'", "'continue'", "'return'", 
		"'goto'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Function", "Global", "If", "Else", "For", "While", "Break", 
		"Continue", "Return", "Goto", "TypeIdentifier", "BoolLiteral", "IntLiteral", 
		"FloatLiteral", "StringLiteral", "Identifier", "Whitespace", "Newline", 
		"BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FlowScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public FlowScriptParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(FlowScriptParser.Eof, 0); }
		public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__0) {
				{
				{
				State = 44; importStatement();
				}
				}
				State = 49;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 53;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << Function) | (1L << Global) | (1L << If) | (1L << For) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << Return) | (1L << Goto) | (1L << TypeIdentifier) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << Identifier))) != 0)) {
				{
				{
				State = 50; statement();
				}
				}
				State = 55;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 56; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(FlowScriptParser.StringLiteral, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(T__0);
			State = 59; Match(StringLiteral);
			State = 60; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_compoundStatement);
		int _la;
		try {
			State = 71;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; Match(T__2);
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << Function) | (1L << Global) | (1L << If) | (1L << For) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << Return) | (1L << Goto) | (1L << TypeIdentifier) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << Identifier))) != 0)) {
					{
					{
					State = 63; statement();
					}
					}
					State = 68;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 69; Match(T__3);
				}
				break;
			case T__1:
			case T__4:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case Function:
			case Global:
			case If:
			case For:
			case While:
			case Break:
			case Continue:
			case Return:
			case Goto:
			case TypeIdentifier:
			case BoolLiteral:
			case IntLiteral:
			case FloatLiteral:
			case StringLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 85;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; Match(T__1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; declarationStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75; expression(0);
				State = 76; Match(T__1);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 78; ifStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 79; forStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 80; whileStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 81; breakStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 82; continueStatement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 83; returnStatement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 84; gotoStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		public FunctionDeclarationStatementContext functionDeclarationStatement() {
			return GetRuleContext<FunctionDeclarationStatementContext>(0);
		}
		public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
			return GetRuleContext<ProcedureDeclarationStatementContext>(0);
		}
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public LabelDeclarationStatementContext labelDeclarationStatement() {
			return GetRuleContext<LabelDeclarationStatementContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_declarationStatement);
		try {
			State = 91;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; functionDeclarationStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; procedureDeclarationStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; variableDeclarationStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90; labelDeclarationStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(FlowScriptParser.Function, 0); }
		public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationStatementContext functionDeclarationStatement() {
		FunctionDeclarationStatementContext _localctx = new FunctionDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_functionDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(Function);
			State = 94; Match(T__4);
			State = 95; Match(IntLiteral);
			State = 96; Match(T__5);
			State = 97; Match(TypeIdentifier);
			State = 98; Match(Identifier);
			State = 99; parameterList();
			State = 100; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ProcedureDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterProcedureDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitProcedureDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
		ProcedureDeclarationStatementContext _localctx = new ProcedureDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_procedureDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(TypeIdentifier);
			State = 103; Match(Identifier);
			State = 104; parameterList();
			State = 109;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 106;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 105; compoundStatement();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 108; Match(T__1);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ITerminalNode Global() { return GetToken(FlowScriptParser.Global, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Global) {
				{
				State = 111; Match(Global);
				}
			}

			State = 114; Match(TypeIdentifier);
			State = 115; Match(Identifier);
			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 116; Match(T__6);
				State = 117; expression(0);
				}
			}

			State = 120; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public LabelDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLabelDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLabelDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDeclarationStatementContext labelDeclarationStatement() {
		LabelDeclarationStatementContext _localctx = new LabelDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_labelDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(Identifier);
			State = 123; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(T__4);
			State = 127;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TypeIdentifier) {
				{
				State = 126; parameter();
				}
			}

			State = 133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__8) {
				{
				{
				State = 129; Match(T__8);
				State = 130; parameter();
				}
				}
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 136; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(TypeIdentifier);
			State = 139; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(T__4);
			State = 143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << TypeIdentifier) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << Identifier))) != 0)) {
				{
				State = 142; expression(0);
				}
			}

			State = 149;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__8) {
				{
				{
				State = 145; Match(T__8);
				State = 146; expression(0);
				}
				}
				State = 151;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 152; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompoundExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompoundExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompoundExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompoundExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullExpressionContext : ExpressionContext {
		public NullExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterNullExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitNullExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPrefixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterUnaryPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitUnaryPrefixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPrefixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPostfixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterUnaryPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitUnaryPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				_localctx = new NullExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 155; Match(T__1);
				}
				break;

			case 2:
				{
				_localctx = new CompoundExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 156; Match(T__4);
				State = 157; expression(0);
				State = 158; Match(T__5);
				}
				break;

			case 3:
				{
				_localctx = new CastExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 160; Match(TypeIdentifier);
				State = 161; Match(T__4);
				State = 162; expression(0);
				State = 163; Match(T__5);
				}
				break;

			case 4:
				{
				_localctx = new CallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 165; Match(Identifier);
				State = 166; expressionList();
				}
				break;

			case 5:
				{
				_localctx = new UnaryPrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 167;
				((UnaryPrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13))) != 0)) ) {
					((UnaryPrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 168; expression(9);
				}
				break;

			case 6:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 169; Match(Identifier);
				State = 170; Match(T__6);
				State = 171; expression(2);
				}
				break;

			case 7:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 172; primary();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 197;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 195;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 175;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 176;
						((MultiplicationExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__14 || _la==T__15) ) {
							((MultiplicationExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 177; expression(9);
						}
						break;

					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 178;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 179;
						((AdditionExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__13 || _la==T__16) ) {
							((AdditionExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 180; expression(8);
						}
						break;

					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 181;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 182;
						((RelationalExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20))) != 0)) ) {
							((RelationalExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 183; expression(7);
						}
						break;

					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 184;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 185;
						((EqualityExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__21 || _la==T__22) ) {
							((EqualityExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 186; expression(6);
						}
						break;

					case 5:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 187;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 188; Match(T__23);
						State = 189; expression(5);
						}
						break;

					case 6:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 190;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 191; Match(T__24);
						State = 192; expression(4);
						}
						break;

					case 7:
						{
						_localctx = new UnaryPostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 193;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 194;
						((UnaryPostfixExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__9 || _la==T__10) ) {
							((UnaryPostfixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					} 
				}
				State = 199;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public IdentifierExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : PrimaryContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_primary);
		try {
			State = 202;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BoolLiteral:
			case IntLiteral:
			case FloatLiteral:
			case StringLiteral:
				_localctx = new ConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 200; constant();
				}
				break;
			case Identifier:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 201; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode BoolLiteral() { return GetToken(FlowScriptParser.BoolLiteral, 0); }
		public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		public ITerminalNode FloatLiteral() { return GetToken(FlowScriptParser.FloatLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(FlowScriptParser.StringLiteral, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(FlowScriptParser.If, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ITerminalNode[] Else() { return GetTokens(FlowScriptParser.Else); }
		public ITerminalNode Else(int i) {
			return GetToken(FlowScriptParser.Else, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(If);
			State = 207; Match(T__4);
			State = 208; expression(0);
			State = 209; Match(T__5);
			State = 210; compoundStatement();
			State = 215;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 211; Match(Else);
					State = 212; statement();
					}
					} 
				}
				State = 217;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode For() { return GetToken(FlowScriptParser.For, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(For);
			State = 219; Match(T__4);
			State = 220; statement();
			State = 221; expression(0);
			State = 222; Match(T__1);
			State = 223; expression(0);
			State = 224; Match(T__5);
			State = 225; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(FlowScriptParser.While, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(While);
			State = 228; expression(0);
			State = 229; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(FlowScriptParser.Break, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(Break);
			State = 232; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Continue() { return GetToken(FlowScriptParser.Continue, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(Continue);
			State = 235; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(FlowScriptParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(Return);
			State = 239;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 238; expression(0);
				}
				break;
			}
			State = 241; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		public ITerminalNode Goto() { return GetToken(FlowScriptParser.Goto, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(Goto);
			State = 244; Match(Identifier);
			State = 245; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);

		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 10);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3/\xFA\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x3\x2\a\x2\x30\n\x2\f\x2\xE\x2\x33\v\x2\x3"+
		"\x2\a\x2\x36\n\x2\f\x2\xE\x2\x39\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\a\x4\x43\n\x4\f\x4\xE\x4\x46\v\x4\x3\x4\x3\x4\x5\x4J\n"+
		"\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x5\x5X\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6^\n\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\bm\n\b\x3\b\x5\b"+
		"p\n\b\x3\t\x5\ts\n\t\x3\t\x3\t\x3\t\x3\t\x5\ty\n\t\x3\t\x3\t\x3\n\x3\n"+
		"\x3\n\x3\v\x3\v\x5\v\x82\n\v\x3\v\x3\v\a\v\x86\n\v\f\v\xE\v\x89\v\v\x3"+
		"\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x5\r\x92\n\r\x3\r\x3\r\a\r\x96\n\r\f"+
		"\r\xE\r\x99\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x5\xE\xB0\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE"+
		"\xC6\n\xE\f\xE\xE\xE\xC9\v\xE\x3\xF\x3\xF\x5\xF\xCD\n\xF\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xD8\n\x11\f\x11"+
		"\xE\x11\xDB\v\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x5\x16\xF2\n\x16\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x2\x2\x3\x1A\x18\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2\x2\t\x3\x2\f\x10\x3\x2\x11\x12\x4\x2\x10\x10\x13"+
		"\x13\x3\x2\x14\x17\x3\x2\x18\x19\x3\x2\f\r\x3\x2\'*\x10B\x2\x31\x3\x2"+
		"\x2\x2\x4<\x3\x2\x2\x2\x6I\x3\x2\x2\x2\bW\x3\x2\x2\x2\n]\x3\x2\x2\x2\f"+
		"_\x3\x2\x2\x2\xEh\x3\x2\x2\x2\x10r\x3\x2\x2\x2\x12|\x3\x2\x2\x2\x14\x7F"+
		"\x3\x2\x2\x2\x16\x8C\x3\x2\x2\x2\x18\x8F\x3\x2\x2\x2\x1A\xAF\x3\x2\x2"+
		"\x2\x1C\xCC\x3\x2\x2\x2\x1E\xCE\x3\x2\x2\x2 \xD0\x3\x2\x2\x2\"\xDC\x3"+
		"\x2\x2\x2$\xE5\x3\x2\x2\x2&\xE9\x3\x2\x2\x2(\xEC\x3\x2\x2\x2*\xEF\x3\x2"+
		"\x2\x2,\xF5\x3\x2\x2\x2.\x30\x5\x4\x3\x2/.\x3\x2\x2\x2\x30\x33\x3\x2\x2"+
		"\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x37\x3\x2\x2\x2\x33\x31\x3"+
		"\x2\x2\x2\x34\x36\x5\b\x5\x2\x35\x34\x3\x2\x2\x2\x36\x39\x3\x2\x2\x2\x37"+
		"\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38:\x3\x2\x2\x2\x39\x37\x3\x2\x2"+
		"\x2:;\a\x2\x2\x3;\x3\x3\x2\x2\x2<=\a\x3\x2\x2=>\a*\x2\x2>?\a\x4\x2\x2"+
		"?\x5\x3\x2\x2\x2@\x44\a\x5\x2\x2\x41\x43\x5\b\x5\x2\x42\x41\x3\x2\x2\x2"+
		"\x43\x46\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45G\x3\x2"+
		"\x2\x2\x46\x44\x3\x2\x2\x2GJ\a\x6\x2\x2HJ\x5\b\x5\x2I@\x3\x2\x2\x2IH\x3"+
		"\x2\x2\x2J\a\x3\x2\x2\x2KX\a\x4\x2\x2LX\x5\n\x6\x2MN\x5\x1A\xE\x2NO\a"+
		"\x4\x2\x2OX\x3\x2\x2\x2PX\x5 \x11\x2QX\x5\"\x12\x2RX\x5$\x13\x2SX\x5&"+
		"\x14\x2TX\x5(\x15\x2UX\x5*\x16\x2VX\x5,\x17\x2WK\x3\x2\x2\x2WL\x3\x2\x2"+
		"\x2WM\x3\x2\x2\x2WP\x3\x2\x2\x2WQ\x3\x2\x2\x2WR\x3\x2\x2\x2WS\x3\x2\x2"+
		"\x2WT\x3\x2\x2\x2WU\x3\x2\x2\x2WV\x3\x2\x2\x2X\t\x3\x2\x2\x2Y^\x5\f\a"+
		"\x2Z^\x5\xE\b\x2[^\x5\x10\t\x2\\^\x5\x12\n\x2]Y\x3\x2\x2\x2]Z\x3\x2\x2"+
		"\x2][\x3\x2\x2\x2]\\\x3\x2\x2\x2^\v\x3\x2\x2\x2_`\a\x1C\x2\x2`\x61\a\a"+
		"\x2\x2\x61\x62\a(\x2\x2\x62\x63\a\b\x2\x2\x63\x64\a&\x2\x2\x64\x65\a+"+
		"\x2\x2\x65\x66\x5\x14\v\x2\x66g\a\x4\x2\x2g\r\x3\x2\x2\x2hi\a&\x2\x2i"+
		"j\a+\x2\x2jo\x5\x14\v\x2km\x5\x6\x4\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2mp\x3"+
		"\x2\x2\x2np\a\x4\x2\x2ol\x3\x2\x2\x2on\x3\x2\x2\x2p\xF\x3\x2\x2\x2qs\a"+
		"\x1D\x2\x2rq\x3\x2\x2\x2rs\x3\x2\x2\x2st\x3\x2\x2\x2tu\a&\x2\x2ux\a+\x2"+
		"\x2vw\a\t\x2\x2wy\x5\x1A\xE\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2yz\x3\x2\x2"+
		"\x2z{\a\x4\x2\x2{\x11\x3\x2\x2\x2|}\a+\x2\x2}~\a\n\x2\x2~\x13\x3\x2\x2"+
		"\x2\x7F\x81\a\a\x2\x2\x80\x82\x5\x16\f\x2\x81\x80\x3\x2\x2\x2\x81\x82"+
		"\x3\x2\x2\x2\x82\x87\x3\x2\x2\x2\x83\x84\a\v\x2\x2\x84\x86\x5\x16\f\x2"+
		"\x85\x83\x3\x2\x2\x2\x86\x89\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3"+
		"\x2\x2\x2\x88\x8A\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x8A\x8B\a\b\x2\x2\x8B"+
		"\x15\x3\x2\x2\x2\x8C\x8D\a&\x2\x2\x8D\x8E\a+\x2\x2\x8E\x17\x3\x2\x2\x2"+
		"\x8F\x91\a\a\x2\x2\x90\x92\x5\x1A\xE\x2\x91\x90\x3\x2\x2\x2\x91\x92\x3"+
		"\x2\x2\x2\x92\x97\x3\x2\x2\x2\x93\x94\a\v\x2\x2\x94\x96\x5\x1A\xE\x2\x95"+
		"\x93\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2"+
		"\x2\x2\x98\x9A\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x9A\x9B\a\b\x2\x2\x9B\x19"+
		"\x3\x2\x2\x2\x9C\x9D\b\xE\x1\x2\x9D\xB0\a\x4\x2\x2\x9E\x9F\a\a\x2\x2\x9F"+
		"\xA0\x5\x1A\xE\x2\xA0\xA1\a\b\x2\x2\xA1\xB0\x3\x2\x2\x2\xA2\xA3\a&\x2"+
		"\x2\xA3\xA4\a\a\x2\x2\xA4\xA5\x5\x1A\xE\x2\xA5\xA6\a\b\x2\x2\xA6\xB0\x3"+
		"\x2\x2\x2\xA7\xA8\a+\x2\x2\xA8\xB0\x5\x18\r\x2\xA9\xAA\t\x2\x2\x2\xAA"+
		"\xB0\x5\x1A\xE\v\xAB\xAC\a+\x2\x2\xAC\xAD\a\t\x2\x2\xAD\xB0\x5\x1A\xE"+
		"\x4\xAE\xB0\x5\x1C\xF\x2\xAF\x9C\x3\x2\x2\x2\xAF\x9E\x3\x2\x2\x2\xAF\xA2"+
		"\x3\x2\x2\x2\xAF\xA7\x3\x2\x2\x2\xAF\xA9\x3\x2\x2\x2\xAF\xAB\x3\x2\x2"+
		"\x2\xAF\xAE\x3\x2\x2\x2\xB0\xC7\x3\x2\x2\x2\xB1\xB2\f\n\x2\x2\xB2\xB3"+
		"\t\x3\x2\x2\xB3\xC6\x5\x1A\xE\v\xB4\xB5\f\t\x2\x2\xB5\xB6\t\x4\x2\x2\xB6"+
		"\xC6\x5\x1A\xE\n\xB7\xB8\f\b\x2\x2\xB8\xB9\t\x5\x2\x2\xB9\xC6\x5\x1A\xE"+
		"\t\xBA\xBB\f\a\x2\x2\xBB\xBC\t\x6\x2\x2\xBC\xC6\x5\x1A\xE\b\xBD\xBE\f"+
		"\x6\x2\x2\xBE\xBF\a\x1A\x2\x2\xBF\xC6\x5\x1A\xE\a\xC0\xC1\f\x5\x2\x2\xC1"+
		"\xC2\a\x1B\x2\x2\xC2\xC6\x5\x1A\xE\x6\xC3\xC4\f\f\x2\x2\xC4\xC6\t\a\x2"+
		"\x2\xC5\xB1\x3\x2\x2\x2\xC5\xB4\x3\x2\x2\x2\xC5\xB7\x3\x2\x2\x2\xC5\xBA"+
		"\x3\x2\x2\x2\xC5\xBD\x3\x2\x2\x2\xC5\xC0\x3\x2\x2\x2\xC5\xC3\x3\x2\x2"+
		"\x2\xC6\xC9\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\x1B"+
		"\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xCD\x5\x1E\x10\x2\xCB\xCD\a+\x2\x2"+
		"\xCC\xCA\x3\x2\x2\x2\xCC\xCB\x3\x2\x2\x2\xCD\x1D\x3\x2\x2\x2\xCE\xCF\t"+
		"\b\x2\x2\xCF\x1F\x3\x2\x2\x2\xD0\xD1\a\x1E\x2\x2\xD1\xD2\a\a\x2\x2\xD2"+
		"\xD3\x5\x1A\xE\x2\xD3\xD4\a\b\x2\x2\xD4\xD9\x5\x6\x4\x2\xD5\xD6\a\x1F"+
		"\x2\x2\xD6\xD8\x5\b\x5\x2\xD7\xD5\x3\x2\x2\x2\xD8\xDB\x3\x2\x2\x2\xD9"+
		"\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA!\x3\x2\x2\x2\xDB\xD9\x3\x2\x2"+
		"\x2\xDC\xDD\a \x2\x2\xDD\xDE\a\a\x2\x2\xDE\xDF\x5\b\x5\x2\xDF\xE0\x5\x1A"+
		"\xE\x2\xE0\xE1\a\x4\x2\x2\xE1\xE2\x5\x1A\xE\x2\xE2\xE3\a\b\x2\x2\xE3\xE4"+
		"\x5\x6\x4\x2\xE4#\x3\x2\x2\x2\xE5\xE6\a!\x2\x2\xE6\xE7\x5\x1A\xE\x2\xE7"+
		"\xE8\x5\x6\x4\x2\xE8%\x3\x2\x2\x2\xE9\xEA\a\"\x2\x2\xEA\xEB\a\x4\x2\x2"+
		"\xEB\'\x3\x2\x2\x2\xEC\xED\a#\x2\x2\xED\xEE\a\x4\x2\x2\xEE)\x3\x2\x2\x2"+
		"\xEF\xF1\a$\x2\x2\xF0\xF2\x5\x1A\xE\x2\xF1\xF0\x3\x2\x2\x2\xF1\xF2\x3"+
		"\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4\a\x4\x2\x2\xF4+\x3\x2\x2\x2\xF5"+
		"\xF6\a%\x2\x2\xF6\xF7\a+\x2\x2\xF7\xF8\a\x4\x2\x2\xF8-\x3\x2\x2\x2\x16"+
		"\x31\x37\x44IW]lorx\x81\x87\x91\x97\xAF\xC5\xC7\xCC\xD9\xF1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AtlusScriptLib.FlowScriptLanguage.Compiler.Parser.Grammar
