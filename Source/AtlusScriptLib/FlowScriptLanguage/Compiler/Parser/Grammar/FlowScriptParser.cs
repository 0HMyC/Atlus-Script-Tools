//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\..\..\AtlusScriptLib\FlowScriptLanguage\Compiler\Parser\Grammar\FlowScript.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AtlusScriptLib.FlowScriptLanguage.Compiler.Parser.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class FlowScriptParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, Import=29, Function=30, Static=31, 
		Const=32, If=33, Else=34, For=35, While=36, Break=37, Continue=38, Return=39, 
		Goto=40, Switch=41, Case=42, Default=43, Enum=44, BoolLiteral=45, IntLiteral=46, 
		FloatLiteral=47, StringLiteral=48, Identifier=49, PrimitiveTypeIdentifier=50, 
		ProcedureIdentifier=51, Whitespace=52, Newline=53, BlockComment=54, LineComment=55;
	public const int
		RULE_compilationUnit = 0, RULE_importStatement = 1, RULE_statement = 2, 
		RULE_nullStatement = 3, RULE_compoundStatement = 4, RULE_declarationStatement = 5, 
		RULE_functionDeclarationStatement = 6, RULE_procedureDeclarationStatement = 7, 
		RULE_variableDeclarationStatement = 8, RULE_enumTypeDeclarationStatement = 9, 
		RULE_enumValueDeclaration = 10, RULE_enumValueList = 11, RULE_labelDeclarationStatement = 12, 
		RULE_variableModifier = 13, RULE_parameterList = 14, RULE_parameter = 15, 
		RULE_expressionList = 16, RULE_expression = 17, RULE_primary = 18, RULE_constant = 19, 
		RULE_ifStatement = 20, RULE_forStatement = 21, RULE_whileStatement = 22, 
		RULE_breakStatement = 23, RULE_continueStatement = 24, RULE_returnStatement = 25, 
		RULE_gotoStatement = 26, RULE_switchStatement = 27, RULE_switchLabel = 28;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importStatement", "statement", "nullStatement", "compoundStatement", 
		"declarationStatement", "functionDeclarationStatement", "procedureDeclarationStatement", 
		"variableDeclarationStatement", "enumTypeDeclarationStatement", "enumValueDeclaration", 
		"enumValueList", "labelDeclarationStatement", "variableModifier", "parameterList", 
		"parameter", "expressionList", "expression", "primary", "constant", "ifStatement", 
		"forStatement", "whileStatement", "breakStatement", "continueStatement", 
		"returnStatement", "gotoStatement", "switchStatement", "switchLabel"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "';'", "'{'", "'}'", "'='", "','", "':'", "'.'", "'--'", 
		"'++'", "'!'", "'-'", "'*'", "'/'", "'+'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'&&'", "'||'", "'+='", "'-='", "'*='", "'/='", "'import'", 
		"'function'", "'static'", "'const'", "'if'", "'else'", "'for'", "'while'", 
		"'break'", "'continue'", "'return'", "'goto'", "'switch'", "'case'", "'default'", 
		"'enum'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "Import", "Function", "Static", "Const", 
		"If", "Else", "For", "While", "Break", "Continue", "Return", "Goto", "Switch", 
		"Case", "Default", "Enum", "BoolLiteral", "IntLiteral", "FloatLiteral", 
		"StringLiteral", "Identifier", "PrimitiveTypeIdentifier", "ProcedureIdentifier", 
		"Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FlowScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public FlowScriptParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(FlowScriptParser.Eof, 0); }
		public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		public DeclarationStatementContext[] declarationStatement() {
			return GetRuleContexts<DeclarationStatementContext>();
		}
		public DeclarationStatementContext declarationStatement(int i) {
			return GetRuleContext<DeclarationStatementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Import) {
				{
				{
				State = 58; importStatement();
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Function) | (1L << Static) | (1L << Const) | (1L << Enum) | (1L << Identifier) | (1L << PrimitiveTypeIdentifier))) != 0)) {
				{
				{
				State = 64; declarationStatement();
				}
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 70; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode Import() { return GetToken(FlowScriptParser.Import, 0); }
		public ITerminalNode StringLiteral() { return GetToken(FlowScriptParser.StringLiteral, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(Import);
			State = 73; Match(T__0);
			State = 74; Match(StringLiteral);
			State = 75; Match(T__1);
			State = 76; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public NullStatementContext nullStatement() {
			return GetRuleContext<NullStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 92;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; nullStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; compoundStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 80; declarationStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 81; expression(0);
				State = 82; Match(T__2);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 84; ifStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 85; forStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 86; whileStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 87; breakStatement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 88; continueStatement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 89; returnStatement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 90; gotoStatement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 91; switchStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullStatementContext : ParserRuleContext {
		public NullStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterNullStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitNullStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullStatementContext nullStatement() {
		NullStatementContext _localctx = new NullStatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_nullStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(T__3);
			State = 100;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << Function) | (1L << Static) | (1L << Const) | (1L << If) | (1L << For) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << Return) | (1L << Goto) | (1L << Switch) | (1L << Enum) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << Identifier) | (1L << PrimitiveTypeIdentifier))) != 0)) {
				{
				{
				State = 97; statement();
				}
				}
				State = 102;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 103; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		public FunctionDeclarationStatementContext functionDeclarationStatement() {
			return GetRuleContext<FunctionDeclarationStatementContext>(0);
		}
		public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
			return GetRuleContext<ProcedureDeclarationStatementContext>(0);
		}
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public EnumTypeDeclarationStatementContext enumTypeDeclarationStatement() {
			return GetRuleContext<EnumTypeDeclarationStatementContext>(0);
		}
		public LabelDeclarationStatementContext labelDeclarationStatement() {
			return GetRuleContext<LabelDeclarationStatementContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_declarationStatement);
		try {
			State = 110;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; functionDeclarationStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; procedureDeclarationStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 107; variableDeclarationStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 108; enumTypeDeclarationStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 109; labelDeclarationStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(FlowScriptParser.Function, 0); }
		public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		public ITerminalNode[] Identifier() { return GetTokens(FlowScriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(FlowScriptParser.Identifier, i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode PrimitiveTypeIdentifier() { return GetToken(FlowScriptParser.PrimitiveTypeIdentifier, 0); }
		public FunctionDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationStatementContext functionDeclarationStatement() {
		FunctionDeclarationStatementContext _localctx = new FunctionDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_functionDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(Function);
			State = 113; Match(T__0);
			State = 114; Match(IntLiteral);
			State = 115; Match(T__1);
			State = 116;
			_la = _input.La(1);
			if ( !(_la==Identifier || _la==PrimitiveTypeIdentifier) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 117; Match(Identifier);
			State = 118; parameterList();
			State = 119; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationStatementContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ITerminalNode PrimitiveTypeIdentifier() { return GetToken(FlowScriptParser.PrimitiveTypeIdentifier, 0); }
		public ITerminalNode[] Identifier() { return GetTokens(FlowScriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(FlowScriptParser.Identifier, i);
		}
		public ITerminalNode ProcedureIdentifier() { return GetToken(FlowScriptParser.ProcedureIdentifier, 0); }
		public ProcedureDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterProcedureDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitProcedureDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
		ProcedureDeclarationStatementContext _localctx = new ProcedureDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_procedureDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_la = _input.La(1);
			if ( !(_la==Identifier || _la==PrimitiveTypeIdentifier) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 122;
			_la = _input.La(1);
			if ( !(_la==Identifier || _la==ProcedureIdentifier) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 123; parameterList();
			State = 124; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(FlowScriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(FlowScriptParser.Identifier, i);
		}
		public ITerminalNode PrimitiveTypeIdentifier() { return GetToken(FlowScriptParser.PrimitiveTypeIdentifier, 0); }
		public VariableModifierContext variableModifier() {
			return GetRuleContext<VariableModifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Static || _la==Const) {
				{
				State = 126; variableModifier();
				}
			}

			State = 129;
			_la = _input.La(1);
			if ( !(_la==Identifier || _la==PrimitiveTypeIdentifier) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 130; Match(Identifier);
			State = 133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__5) {
				{
				State = 131; Match(T__5);
				State = 132; expression(0);
				}
			}

			State = 135; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Enum() { return GetToken(FlowScriptParser.Enum, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public EnumValueListContext enumValueList() {
			return GetRuleContext<EnumValueListContext>(0);
		}
		public EnumTypeDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEnumTypeDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEnumTypeDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDeclarationStatementContext enumTypeDeclarationStatement() {
		EnumTypeDeclarationStatementContext _localctx = new EnumTypeDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_enumTypeDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(Enum);
			State = 138; Match(Identifier);
			State = 139; enumValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumValueDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEnumValueDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEnumValueDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueDeclarationContext enumValueDeclaration() {
		EnumValueDeclarationContext _localctx = new EnumValueDeclarationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_enumValueDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(Identifier);
			State = 144;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__5) {
				{
				State = 142; Match(T__5);
				State = 143; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueListContext : ParserRuleContext {
		public EnumValueDeclarationContext[] enumValueDeclaration() {
			return GetRuleContexts<EnumValueDeclarationContext>();
		}
		public EnumValueDeclarationContext enumValueDeclaration(int i) {
			return GetRuleContext<EnumValueDeclarationContext>(i);
		}
		public EnumValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEnumValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEnumValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueListContext enumValueList() {
		EnumValueListContext _localctx = new EnumValueListContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_enumValueList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(T__3);
			State = 148;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 147; enumValueDeclaration();
				}
				break;
			}
			State = 155;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 150; enumValueDeclaration();
					State = 151; Match(T__6);
					}
					} 
				}
				State = 157;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 162;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 158; enumValueDeclaration();
				State = 160;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__6) {
					{
					State = 159; Match(T__6);
					}
				}

				}
			}

			State = 164; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public LabelDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLabelDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLabelDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDeclarationStatementContext labelDeclarationStatement() {
		LabelDeclarationStatementContext _localctx = new LabelDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_labelDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(Identifier);
			State = 167; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public ITerminalNode Static() { return GetToken(FlowScriptParser.Static, 0); }
		public ITerminalNode Const() { return GetToken(FlowScriptParser.Const, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_variableModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			_la = _input.La(1);
			if ( !(_la==Static || _la==Const) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(T__0);
			State = 173;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Identifier || _la==PrimitiveTypeIdentifier) {
				{
				State = 172; parameter();
				}
			}

			State = 179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__6) {
				{
				{
				State = 175; Match(T__6);
				State = 176; parameter();
				}
				}
				State = 181;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 182; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(FlowScriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(FlowScriptParser.Identifier, i);
		}
		public ITerminalNode PrimitiveTypeIdentifier() { return GetToken(FlowScriptParser.PrimitiveTypeIdentifier, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_la = _input.La(1);
			if ( !(_la==Identifier || _la==PrimitiveTypeIdentifier) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 185; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(T__0);
			State = 189;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << Identifier) | (1L << PrimitiveTypeIdentifier))) != 0)) {
				{
				State = 188; expression(0);
				}
			}

			State = 195;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__6) {
				{
				{
				State = 191; Match(T__6);
				State = 192; expression(0);
				}
				}
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 198; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public IToken Op;
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPostfixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterUnaryPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitUnaryPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PrimitiveTypeIdentifier() { return GetToken(FlowScriptParser.PrimitiveTypeIdentifier, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompoundExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompoundExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompoundExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompoundExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullExpressionContext : ExpressionContext {
		public NullExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterNullExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitNullExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public ITerminalNode[] Identifier() { return GetTokens(FlowScriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(FlowScriptParser.Identifier, i);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPrefixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterUnaryPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitUnaryPrefixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPrefixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				_localctx = new NullExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 201; Match(T__2);
				}
				break;

			case 2:
				{
				_localctx = new CompoundExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 202; Match(T__0);
				State = 203; expression(0);
				State = 204; Match(T__1);
				}
				break;

			case 3:
				{
				_localctx = new MemberAccessExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 206; Match(Identifier);
				State = 207; Match(T__8);
				State = 208; Match(Identifier);
				}
				break;

			case 4:
				{
				_localctx = new CastExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 209;
				_la = _input.La(1);
				if ( !(_la==Identifier || _la==PrimitiveTypeIdentifier) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 210; Match(T__0);
				State = 211; expression(0);
				State = 212; Match(T__1);
				}
				break;

			case 5:
				{
				_localctx = new CallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 214; Match(Identifier);
				State = 215; expressionList();
				}
				break;

			case 6:
				{
				_localctx = new UnaryPrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 216;
				((UnaryPrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
					((UnaryPrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 217; expression(9);
				}
				break;

			case 7:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 218; Match(Identifier);
				State = 219;
				((AssignmentExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
					((AssignmentExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 220; expression(2);
				}
				break;

			case 8:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 221; primary();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 246;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 244;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 224;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 225;
						((MultiplicationExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__13 || _la==T__14) ) {
							((MultiplicationExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 226; expression(9);
						}
						break;

					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 227;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 228;
						((AdditionExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__12 || _la==T__15) ) {
							((AdditionExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 229; expression(8);
						}
						break;

					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 230;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 231;
						((RelationalExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
							((RelationalExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 232; expression(7);
						}
						break;

					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 233;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 234;
						((EqualityExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__20 || _la==T__21) ) {
							((EqualityExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 235; expression(6);
						}
						break;

					case 5:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 236;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 237; Match(T__22);
						State = 238; expression(5);
						}
						break;

					case 6:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 239;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 240; Match(T__23);
						State = 241; expression(4);
						}
						break;

					case 7:
						{
						_localctx = new UnaryPostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 242;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 243;
						((UnaryPostfixExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__9 || _la==T__10) ) {
							((UnaryPostfixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					} 
				}
				State = 248;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public IdentifierExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : PrimaryContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_primary);
		try {
			State = 251;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BoolLiteral:
			case IntLiteral:
			case FloatLiteral:
			case StringLiteral:
				_localctx = new ConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 249; constant();
				}
				break;
			case Identifier:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode BoolLiteral() { return GetToken(FlowScriptParser.BoolLiteral, 0); }
		public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		public ITerminalNode FloatLiteral() { return GetToken(FlowScriptParser.FloatLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(FlowScriptParser.StringLiteral, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(FlowScriptParser.If, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] Else() { return GetTokens(FlowScriptParser.Else); }
		public ITerminalNode Else(int i) {
			return GetToken(FlowScriptParser.Else, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(If);
			State = 256; Match(T__0);
			State = 257; expression(0);
			State = 258; Match(T__1);
			State = 259; statement();
			State = 264;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 260; Match(Else);
					State = 261; statement();
					}
					} 
				}
				State = 266;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode For() { return GetToken(FlowScriptParser.For, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(For);
			State = 268; Match(T__0);
			State = 269; statement();
			State = 270; expression(0);
			State = 271; Match(T__2);
			State = 272; expression(0);
			State = 273; Match(T__1);
			State = 274; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(FlowScriptParser.While, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(While);
			State = 277; expression(0);
			State = 278; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(FlowScriptParser.Break, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(Break);
			State = 281; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Continue() { return GetToken(FlowScriptParser.Continue, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(Continue);
			State = 284; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(FlowScriptParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(Return);
			State = 288;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 287; expression(0);
				}
				break;
			}
			State = 290; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		public ITerminalNode Goto() { return GetToken(FlowScriptParser.Goto, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(Goto);
			State = 293; Match(Identifier);
			State = 294; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ITerminalNode Switch() { return GetToken(FlowScriptParser.Switch, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(Switch);
			State = 297; Match(T__0);
			State = 298; expression(0);
			State = 299; Match(T__1);
			State = 300; Match(T__3);
			State = 302;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 301; switchLabel();
				}
				}
				State = 304;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==Case || _la==Default );
			State = 306; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ITerminalNode Case() { return GetToken(FlowScriptParser.Case, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Default() { return GetToken(FlowScriptParser.Default, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_switchLabel);
		int _la;
		try {
			State = 325;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 308; Match(Case);
				State = 309; expression(0);
				State = 310; Match(T__7);
				State = 314;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << Function) | (1L << Static) | (1L << Const) | (1L << If) | (1L << For) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << Return) | (1L << Goto) | (1L << Switch) | (1L << Enum) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << Identifier) | (1L << PrimitiveTypeIdentifier))) != 0)) {
					{
					{
					State = 311; statement();
					}
					}
					State = 316;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317; Match(Default);
				State = 318; Match(T__7);
				State = 322;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << Function) | (1L << Static) | (1L << Const) | (1L << If) | (1L << For) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << Return) | (1L << Goto) | (1L << Switch) | (1L << Enum) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << Identifier) | (1L << PrimitiveTypeIdentifier))) != 0)) {
					{
					{
					State = 319; statement();
					}
					}
					State = 324;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);

		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 10);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x39\x14A\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x3\x2\a\x2>\n\x2\f\x2\xE"+
		"\x2\x41\v\x2\x3\x2\a\x2\x44\n\x2\f\x2\xE\x2G\v\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4_\n\x4\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\a\x6\x65\n\x6\f\x6\xE\x6h\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x5\aq\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\n\x5\n\x82\n\n\x3\n\x3\n\x3\n\x3\n\x5\n\x88\n\n\x3"+
		"\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x5\f\x93\n\f\x3\r\x3\r\x5\r"+
		"\x97\n\r\x3\r\x3\r\x3\r\a\r\x9C\n\r\f\r\xE\r\x9F\v\r\x3\r\x3\r\x5\r\xA3"+
		"\n\r\x5\r\xA5\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x5\x10\xB0\n\x10\x3\x10\x3\x10\a\x10\xB4\n\x10\f\x10\xE\x10\xB7\v\x10"+
		"\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x5\x12\xC0\n\x12\x3"+
		"\x12\x3\x12\a\x12\xC4\n\x12\f\x12\xE\x12\xC7\v\x12\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x5\x13\xE1\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\a\x13\xF7\n\x13\f\x13\xE\x13\xFA\v\x13\x3\x14"+
		"\x3\x14\x5\x14\xFE\n\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\a\x16\x109\n\x16\f\x16\xE\x16\x10C\v\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x5"+
		"\x1B\x123\n\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x6\x1D\x131\n\x1D\r\x1D\xE\x1D\x132\x3\x1D"+
		"\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x13B\n\x1E\f\x1E\xE\x1E\x13E"+
		"\v\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x143\n\x1E\f\x1E\xE\x1E\x146\v\x1E\x5"+
		"\x1E\x148\n\x1E\x3\x1E\x2\x2\x3$\x1F\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2\x2\r\x3"+
		"\x2\x33\x34\x4\x2\x33\x33\x35\x35\x3\x2!\"\x3\x2\f\xF\x4\x2\b\b\x1B\x1E"+
		"\x3\x2\x10\x11\x4\x2\xF\xF\x12\x12\x3\x2\x13\x16\x3\x2\x17\x18\x3\x2\f"+
		"\r\x3\x2/\x32\x15E\x2?\x3\x2\x2\x2\x4J\x3\x2\x2\x2\x6^\x3\x2\x2\x2\b`"+
		"\x3\x2\x2\x2\n\x62\x3\x2\x2\x2\fp\x3\x2\x2\x2\xEr\x3\x2\x2\x2\x10{\x3"+
		"\x2\x2\x2\x12\x81\x3\x2\x2\x2\x14\x8B\x3\x2\x2\x2\x16\x8F\x3\x2\x2\x2"+
		"\x18\x94\x3\x2\x2\x2\x1A\xA8\x3\x2\x2\x2\x1C\xAB\x3\x2\x2\x2\x1E\xAD\x3"+
		"\x2\x2\x2 \xBA\x3\x2\x2\x2\"\xBD\x3\x2\x2\x2$\xE0\x3\x2\x2\x2&\xFD\x3"+
		"\x2\x2\x2(\xFF\x3\x2\x2\x2*\x101\x3\x2\x2\x2,\x10D\x3\x2\x2\x2.\x116\x3"+
		"\x2\x2\x2\x30\x11A\x3\x2\x2\x2\x32\x11D\x3\x2\x2\x2\x34\x120\x3\x2\x2"+
		"\x2\x36\x126\x3\x2\x2\x2\x38\x12A\x3\x2\x2\x2:\x147\x3\x2\x2\x2<>\x5\x4"+
		"\x3\x2=<\x3\x2\x2\x2>\x41\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\x45"+
		"\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42\x44\x5\f\a\x2\x43\x42\x3\x2\x2\x2\x44"+
		"G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46H\x3\x2\x2\x2"+
		"G\x45\x3\x2\x2\x2HI\a\x2\x2\x3I\x3\x3\x2\x2\x2JK\a\x1F\x2\x2KL\a\x3\x2"+
		"\x2LM\a\x32\x2\x2MN\a\x4\x2\x2NO\a\x5\x2\x2O\x5\x3\x2\x2\x2P_\x5\b\x5"+
		"\x2Q_\x5\n\x6\x2R_\x5\f\a\x2ST\x5$\x13\x2TU\a\x5\x2\x2U_\x3\x2\x2\x2V"+
		"_\x5*\x16\x2W_\x5,\x17\x2X_\x5.\x18\x2Y_\x5\x30\x19\x2Z_\x5\x32\x1A\x2"+
		"[_\x5\x34\x1B\x2\\_\x5\x36\x1C\x2]_\x5\x38\x1D\x2^P\x3\x2\x2\x2^Q\x3\x2"+
		"\x2\x2^R\x3\x2\x2\x2^S\x3\x2\x2\x2^V\x3\x2\x2\x2^W\x3\x2\x2\x2^X\x3\x2"+
		"\x2\x2^Y\x3\x2\x2\x2^Z\x3\x2\x2\x2^[\x3\x2\x2\x2^\\\x3\x2\x2\x2^]\x3\x2"+
		"\x2\x2_\a\x3\x2\x2\x2`\x61\a\x5\x2\x2\x61\t\x3\x2\x2\x2\x62\x66\a\x6\x2"+
		"\x2\x63\x65\x5\x6\x4\x2\x64\x63\x3\x2\x2\x2\x65h\x3\x2\x2\x2\x66\x64\x3"+
		"\x2\x2\x2\x66g\x3\x2\x2\x2gi\x3\x2\x2\x2h\x66\x3\x2\x2\x2ij\a\a\x2\x2"+
		"j\v\x3\x2\x2\x2kq\x5\xE\b\x2lq\x5\x10\t\x2mq\x5\x12\n\x2nq\x5\x14\v\x2"+
		"oq\x5\x1A\xE\x2pk\x3\x2\x2\x2pl\x3\x2\x2\x2pm\x3\x2\x2\x2pn\x3\x2\x2\x2"+
		"po\x3\x2\x2\x2q\r\x3\x2\x2\x2rs\a \x2\x2st\a\x3\x2\x2tu\a\x30\x2\x2uv"+
		"\a\x4\x2\x2vw\t\x2\x2\x2wx\a\x33\x2\x2xy\x5\x1E\x10\x2yz\a\x5\x2\x2z\xF"+
		"\x3\x2\x2\x2{|\t\x2\x2\x2|}\t\x3\x2\x2}~\x5\x1E\x10\x2~\x7F\x5\n\x6\x2"+
		"\x7F\x11\x3\x2\x2\x2\x80\x82\x5\x1C\xF\x2\x81\x80\x3\x2\x2\x2\x81\x82"+
		"\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\t\x2\x2\x2\x84\x87\a\x33\x2\x2"+
		"\x85\x86\a\b\x2\x2\x86\x88\x5$\x13\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2"+
		"\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8A\a\x5\x2\x2\x8A\x13\x3\x2\x2\x2\x8B"+
		"\x8C\a.\x2\x2\x8C\x8D\a\x33\x2\x2\x8D\x8E\x5\x18\r\x2\x8E\x15\x3\x2\x2"+
		"\x2\x8F\x92\a\x33\x2\x2\x90\x91\a\b\x2\x2\x91\x93\x5$\x13\x2\x92\x90\x3"+
		"\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x17\x3\x2\x2\x2\x94\x96\a\x6\x2\x2\x95"+
		"\x97\x5\x16\f\x2\x96\x95\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x9D\x3\x2"+
		"\x2\x2\x98\x99\x5\x16\f\x2\x99\x9A\a\t\x2\x2\x9A\x9C\x3\x2\x2\x2\x9B\x98"+
		"\x3\x2\x2\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2"+
		"\x2\x9E\xA4\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\xA2\x5\x16\f\x2\xA1\xA3"+
		"\a\t\x2\x2\xA2\xA1\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA5\x3\x2\x2\x2"+
		"\xA4\xA0\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\a"+
		"\a\x2\x2\xA7\x19\x3\x2\x2\x2\xA8\xA9\a\x33\x2\x2\xA9\xAA\a\n\x2\x2\xAA"+
		"\x1B\x3\x2\x2\x2\xAB\xAC\t\x4\x2\x2\xAC\x1D\x3\x2\x2\x2\xAD\xAF\a\x3\x2"+
		"\x2\xAE\xB0\x5 \x11\x2\xAF\xAE\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB5"+
		"\x3\x2\x2\x2\xB1\xB2\a\t\x2\x2\xB2\xB4\x5 \x11\x2\xB3\xB1\x3\x2\x2\x2"+
		"\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB8\x3"+
		"\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xB9\a\x4\x2\x2\xB9\x1F\x3\x2\x2\x2\xBA"+
		"\xBB\t\x2\x2\x2\xBB\xBC\a\x33\x2\x2\xBC!\x3\x2\x2\x2\xBD\xBF\a\x3\x2\x2"+
		"\xBE\xC0\x5$\x13\x2\xBF\xBE\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC5\x3"+
		"\x2\x2\x2\xC1\xC2\a\t\x2\x2\xC2\xC4\x5$\x13\x2\xC3\xC1\x3\x2\x2\x2\xC4"+
		"\xC7\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC8\x3\x2"+
		"\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xC9\a\x4\x2\x2\xC9#\x3\x2\x2\x2\xCA\xCB"+
		"\b\x13\x1\x2\xCB\xE1\a\x5\x2\x2\xCC\xCD\a\x3\x2\x2\xCD\xCE\x5$\x13\x2"+
		"\xCE\xCF\a\x4\x2\x2\xCF\xE1\x3\x2\x2\x2\xD0\xD1\a\x33\x2\x2\xD1\xD2\a"+
		"\v\x2\x2\xD2\xE1\a\x33\x2\x2\xD3\xD4\t\x2\x2\x2\xD4\xD5\a\x3\x2\x2\xD5"+
		"\xD6\x5$\x13\x2\xD6\xD7\a\x4\x2\x2\xD7\xE1\x3\x2\x2\x2\xD8\xD9\a\x33\x2"+
		"\x2\xD9\xE1\x5\"\x12\x2\xDA\xDB\t\x5\x2\x2\xDB\xE1\x5$\x13\v\xDC\xDD\a"+
		"\x33\x2\x2\xDD\xDE\t\x6\x2\x2\xDE\xE1\x5$\x13\x4\xDF\xE1\x5&\x14\x2\xE0"+
		"\xCA\x3\x2\x2\x2\xE0\xCC\x3\x2\x2\x2\xE0\xD0\x3\x2\x2\x2\xE0\xD3\x3\x2"+
		"\x2\x2\xE0\xD8\x3\x2\x2\x2\xE0\xDA\x3\x2\x2\x2\xE0\xDC\x3\x2\x2\x2\xE0"+
		"\xDF\x3\x2\x2\x2\xE1\xF8\x3\x2\x2\x2\xE2\xE3\f\n\x2\x2\xE3\xE4\t\a\x2"+
		"\x2\xE4\xF7\x5$\x13\v\xE5\xE6\f\t\x2\x2\xE6\xE7\t\b\x2\x2\xE7\xF7\x5$"+
		"\x13\n\xE8\xE9\f\b\x2\x2\xE9\xEA\t\t\x2\x2\xEA\xF7\x5$\x13\t\xEB\xEC\f"+
		"\a\x2\x2\xEC\xED\t\n\x2\x2\xED\xF7\x5$\x13\b\xEE\xEF\f\x6\x2\x2\xEF\xF0"+
		"\a\x19\x2\x2\xF0\xF7\x5$\x13\a\xF1\xF2\f\x5\x2\x2\xF2\xF3\a\x1A\x2\x2"+
		"\xF3\xF7\x5$\x13\x6\xF4\xF5\f\f\x2\x2\xF5\xF7\t\v\x2\x2\xF6\xE2\x3\x2"+
		"\x2\x2\xF6\xE5\x3\x2\x2\x2\xF6\xE8\x3\x2\x2\x2\xF6\xEB\x3\x2\x2\x2\xF6"+
		"\xEE\x3\x2\x2\x2\xF6\xF1\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF7\xFA\x3\x2"+
		"\x2\x2\xF8\xF6\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9%\x3\x2\x2\x2\xFA\xF8"+
		"\x3\x2\x2\x2\xFB\xFE\x5(\x15\x2\xFC\xFE\a\x33\x2\x2\xFD\xFB\x3\x2\x2\x2"+
		"\xFD\xFC\x3\x2\x2\x2\xFE\'\x3\x2\x2\x2\xFF\x100\t\f\x2\x2\x100)\x3\x2"+
		"\x2\x2\x101\x102\a#\x2\x2\x102\x103\a\x3\x2\x2\x103\x104\x5$\x13\x2\x104"+
		"\x105\a\x4\x2\x2\x105\x10A\x5\x6\x4\x2\x106\x107\a$\x2\x2\x107\x109\x5"+
		"\x6\x4\x2\x108\x106\x3\x2\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x108\x3\x2"+
		"\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B+\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D"+
		"\x10E\a%\x2\x2\x10E\x10F\a\x3\x2\x2\x10F\x110\x5\x6\x4\x2\x110\x111\x5"+
		"$\x13\x2\x111\x112\a\x5\x2\x2\x112\x113\x5$\x13\x2\x113\x114\a\x4\x2\x2"+
		"\x114\x115\x5\x6\x4\x2\x115-\x3\x2\x2\x2\x116\x117\a&\x2\x2\x117\x118"+
		"\x5$\x13\x2\x118\x119\x5\x6\x4\x2\x119/\x3\x2\x2\x2\x11A\x11B\a\'\x2\x2"+
		"\x11B\x11C\a\x5\x2\x2\x11C\x31\x3\x2\x2\x2\x11D\x11E\a(\x2\x2\x11E\x11F"+
		"\a\x5\x2\x2\x11F\x33\x3\x2\x2\x2\x120\x122\a)\x2\x2\x121\x123\x5$\x13"+
		"\x2\x122\x121\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2"+
		"\x124\x125\a\x5\x2\x2\x125\x35\x3\x2\x2\x2\x126\x127\a*\x2\x2\x127\x128"+
		"\a\x33\x2\x2\x128\x129\a\x5\x2\x2\x129\x37\x3\x2\x2\x2\x12A\x12B\a+\x2"+
		"\x2\x12B\x12C\a\x3\x2\x2\x12C\x12D\x5$\x13\x2\x12D\x12E\a\x4\x2\x2\x12E"+
		"\x130\a\x6\x2\x2\x12F\x131\x5:\x1E\x2\x130\x12F\x3\x2\x2\x2\x131\x132"+
		"\x3\x2\x2\x2\x132\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x134\x3"+
		"\x2\x2\x2\x134\x135\a\a\x2\x2\x135\x39\x3\x2\x2\x2\x136\x137\a,\x2\x2"+
		"\x137\x138\x5$\x13\x2\x138\x13C\a\n\x2\x2\x139\x13B\x5\x6\x4\x2\x13A\x139"+
		"\x3\x2\x2\x2\x13B\x13E\x3\x2\x2\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13D\x3"+
		"\x2\x2\x2\x13D\x148\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13F\x140\a-\x2"+
		"\x2\x140\x144\a\n\x2\x2\x141\x143\x5\x6\x4\x2\x142\x141\x3\x2\x2\x2\x143"+
		"\x146\x3\x2\x2\x2\x144\x142\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x148"+
		"\x3\x2\x2\x2\x146\x144\x3\x2\x2\x2\x147\x136\x3\x2\x2\x2\x147\x13F\x3"+
		"\x2\x2\x2\x148;\x3\x2\x2\x2\x1C?\x45^\x66p\x81\x87\x92\x96\x9D\xA2\xA4"+
		"\xAF\xB5\xBF\xC5\xE0\xF6\xF8\xFD\x10A\x122\x132\x13C\x144\x147";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AtlusScriptLib.FlowScriptLanguage.Compiler.Parser.Grammar
